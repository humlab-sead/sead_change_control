#!/bin/bash

source .env

g_host=
g_user=
g_port=5433
g_target_folder="."
g_compress_flag=YES
g_verbose=NO

if [ "$g_host" == "" ]; then
    if [ -f ~/vault/.default.sead.server ]; then
        g_host=`cat ~/vault/.default.sead.server`;
    else
        g_host=$(hostname -A);
    fi
fi

if [ "$g_user" == "" ]; then
    if [ -f ~/vault/.default.sead.username ]; then
        g_user=`cat ~/vault/.default.sead.username`;
    else
        g_user="humlab_admin";
    fi
fi

usage_message=$(cat <<EOF
usage: export-database DBNAME SCHEMANAME OPTIONS

    --host SERVERNAME               Target server (${g_host})
    --user USERNAME                 User on target server (${g_user})
    --port PORT                     Server port on target server (${g_port})
    --target-folder FOLDER          Store in folder ($g_target_folder)
    --compress/--no-compress        Create a fresh database from given source ($g_compress_flag).
    --verbose                       Print progress ($g_verbose).
EOF
)

function usage() {
    echo "$usage_message";
    exit 64
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --host)
            g_host="$2"; shift; shift
        ;;
        --port)
            g_port="$2"; shift; shift
        ;;
        --user)
            g_user="$2"; shift; shift
        ;;
        --target-folder)
            g_target_folder="$2"; shift; shift
        ;;
        --verbose)
            g_verbose="YES"; shift;
        ;;
        --compress)
            g_compress_flag="YES"; shift;
        ;;
        --no-compress)
            g_compress_flag="NO"; shift;
        ;;
        *)
            POSITIONAL+=("$1") # save it in an array for later
            shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

g_database=$1
g_schema_name=$2

if [ "$g_database" == "" ] || [ "$g_schema_name" == "" ]; then
    usage;
fi

function dbexec() {
    local sql="$1"
    psql -v ON_ERROR_STOP=1 -h $g_host -U $g_user -d $g_database -p $g_port --no-password --command "$sql"
    # echo $result
    if [ $? -ne 0 ];  then
        echo "fatal: psql command failed! script aborted." >&2
        exit 64
    fi
}

function dbexecfile() {
    local filename=$1
    psql -v ON_ERROR_STOP=1 -h $g_host -U $g_user -d $g_database -p $g_port -f "$filename"
    return_code=$?
    if [ $return_code -ne 0 ];  then
        echo "fatal: psql command failed! script aborted." >&2
        exit 64
    fi
}

function get_column_names() {
    local schema_name=$1
    local table_name=$2
    local sql=$(cat <<END
        select string_agg(column_name, ', ')
        from (
            select column_name
            from information_schema.columns
            where table_schema = '$schema_name'
            and table_name = '$table_name'
            and is_generated = 'NEVER'
            order by ordinal_position
        ) as t;
END
)
    psql -h $g_host -U $g_user -d $g_database -p $g_port -tAc "$sql"
}


dump_tables()
{
    local schema_name=$1
    local sql=$(cat <<END
        select tablename
        from pg_catalog.pg_tables
        where schemaname = '$schema_name'
        order by tablename;
END
)
    mkdir -p $g_target_folder
    let table_count=0
    let table_empty_count=0
    # echo $sql
    rm -f "$g_target_folder/copy_*.sql" "$g_target_folder/*.sql.gz"

    copy_options="with (format text, delimiter E'\t', encoding 'utf-8')"
    copy_out_script="$g_target_folder/copy_out.sql"
    copy_in_script="$g_target_folder/copy_in.sql"
    set -f
    while read table ; do

        #[ "$g_verbose" == "YES" ] && echo "tablename: $table";

        # pg_dump -h $g_host -U $g_user -d $g_database -t "$schema_name.$table" -b -E=utf8 -a > $g_target_folder/$table.sql;
        # if [ "$g_compress_flag" == "YES" ]; then
        #     gzip --force --quiet $g_target_folder/$table.sql
        # fi

        local column_names=$(get_column_names $schema_name $table)

        if [ "$g_compress_flag" == "YES" ]; then
            copy_out="\\copy (select $column_names from $schema_name.$table) to program 'gzip -nqa9 > $g_target_folder/$table.sql.gz' $copy_options;";
            copy_in="\\copy $schema_name.$table ($column_names) from program 'zcat -qac $g_target_folder/$table.sql.gz' $copy_options;";
        else
            copy_out="\\copy (select $column_names from $schema_name.$table) to '$g_target_folder/$table.sql' $copy_options;";
            copy_in="\\copy $schema_name.$table ($column_names) from '$g_target_folder/$table.sql.gz' $copy_options;";
        fi;

        output=$(dbexec "$copy_out")
        copy_count=${output#COPY }

        if [ "$copy_count" != "0" ]; then
            [ "$g_verbose" == "YES" ] && echo "copied: $table ($copy_count rows)";
            let table_count=$(( table_count + 1 ));
            echo $copy_out >> "$copy_out_script"
            echo $copy_in >> "$copy_in_script"
        else
            [ "$g_verbose" == "YES" ] && echo "skipped: $table (empty)";
            rm -f "$g_target_folder/$table.sql" "$g_target_folder/$table.sql.gz"
            let table_empty_count=$(( table_empty_count + 1 ));
        fi

    done < <(
        psql -h $g_host -U $g_user -d $g_database -p $g_port -c "$sql" -X -t --quiet --field-separator ' ' --no-align
    )

    # dbexecfile "$copy_out_script"

    echo "info: dumped ${table_count} tables to folder \"$g_target_folder\" (ignored $table_empty_count empty tables) "

}

dump_tables $g_schema_name

#        echo "\\copy $g_schema_name.$table from program 'zcat -qac $g_target_folder/$table.sql.gz' with (FORMAT text, DELIMITER E'\t', ENCODING 'utf-8');
