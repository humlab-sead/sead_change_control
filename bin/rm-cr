#!/bin/bash

SHELL=/bin/bash

set -e

. $(dirname "$0")/utility.sh

usage_message=$(cat <<EOF
usage: rm-cr OPTIONS...

Removes change from project's sqitch.plan and moves SQL files to ./deprecated. 

If no project is specified, then all projects are searched for change. 
If change is not found, no action is taken.

    --change            Change to remove.
    --project NAME      Project change belongs to.
    --update-plan       Remove change from sqitch.plan.

Examples:

bin/rm-cr --change "20231201_XYZ" --update-plan --project "project-name"
bin/rm-cr --change "20231201_XYZ" --update-plan

EOF
)

function usage() {
    echo "$usage_message"
}

g_change=
g_project=
g_update_plan=YES

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --change|-c)
            g_change="$2";
            shift 2;
        ;;
        --project|-p)
            g_project="$2";
            shift 2;
        ;;
        --no-update-plan|-u)
            g_update_plan="NO";
            shift;
        ;;
        --help|-h)
            usage
            exit 0
        ;;
        --*)
            echo "error: invalid option $1"
            usage
            exit 64 
        ;;
        *)
            POSITIONAL+=("$1")
            shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}"

if [ -z "$g_change" ]; then
    g_change="${POSITIONAL[@]}"
    if [ -z "$g_change" ]; then
        echo "error: missing required option --change"
        exit 64
    fi
fi

if [ -z "$g_projects" ]; then
    g_projects=$(find . -name "sqitch.plan" -type f -exec dirname \{\} \;)
else
    g_projects=$(echo "$g_projects" | tr "," "\n")
fi

for project in $g_projects; do
    if [ -f "$project/deploy/${g_change}.sql" ]; then
        mkdir -p $project/archive/deploy $project/archive/revert $project/archive/verify
        for type in deploy revert verify ; do
            # if [ ! -f "$project/$type/${g_change}.sql" ]; then
            #     echo "Change $project/$type/${g_change}.sql does not exist"
            #     exit 64
            # fi
            mv "$project/$type/${g_change}.sql" "$project/archive/$type/${g_change}.sql"
        done

        if [ -d "$project/deploy/${g_change}" ]; then
            mv "$project/deploy/${g_change}" "$project/archive/deploy/${g_change}"
        fi

        tag=$(get_change_tag "$project" "$g_change")
        issue_id=$(get_cr_issue_id "$project" "$g_change")

        echo "$tag" >> "$project/archive/sqitch.history"
        grep -e "$g_change" "$project/sqitch.plan" >> "$project/archive/sqitch.history"
        grep -v -e "$g_change" "$project/sqitch.plan" > "$project/sqitch.plan.tmp"
        mv -f "$project/sqitch.plan.tmp" "$project/sqitch.plan"

        if [ ! -z "$issue_id" ]; then
            echo "Archiving issue $issue_id"
            gh issue close $issue_id
            gh issue comment -b "This CR has been archived." $issue_id
        fi
        echo "Change $project/$g_change moved to ./$project/archive"
        exit 0
    fi
done

echo "Change $g_change not found!"
exit 64
