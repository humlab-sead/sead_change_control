#!/bin/bash

set -e

. $(dirname "$0")/utility.sh

export PGCLIENTENCODING=UTF8
unset PAGER

script_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

DEFAULT_SOURCE_DB_NAME=sead_master_9
DEFAULT_SOURCE_DUMP_FILE="./starting_point/sead_master_9_public.sql.gz"

DOT_HOST_FILE=~/vault/.default.sead.server
DOT_USER_FILE=~/vault/.default.sead.username
DOT_SQITCH_FILE=~/vault/.sqitch.env

g_target_name=
g_create_database=NO
g_source_type=
g_source_name=
g_conflict_resolution=rename
g_create_snapshot=NO
g_dry_run=NO
g_display_status=NO
g_display_tags=NO
g_sync_sequences=NO
g_target_tag=
g_start_tag=
g_target_chain_tag=
g_target_single_cr=
g_ignore_git_tags=NO
g_deploy_starting_point=NO
g_rename_end_of_chain=NO
g_verbose=NO

default_projects=$(get_projects)

log_file="logs/"`date "+%Y%m%d%H%M%S"`_"deploy_${g_target_name}_${g_source_type}.log"

g_user=
g_host=
g_port=

if [[ -f "$DOT_HOST_FILE" ]]; then
    g_host=`cat $DOT_HOST_FILE`
fi

if [ "$g_host" == "" ]; then
    g_host=$(dnsdomainname -A)
fi

if [[ -f "$DOT_USER_FILE" ]]; then
    g_user=`cat $DOT_USER_FILE`
fi

usage_message=$(cat <<EOF
Usage: deploy-staging [OPTIONS]...

Options:
    --host SERVERNAME               Specify the server name (default: ${g_host})
    --port PORT                     Specify the port number (default: 5433)
    --user USERNAME                 Specify the user on the target server (default: ${g_user})
    --target-db-name DBNAME         Specify the target database name (required)
    --create-database               Create a new database from the specified source
    --create-snapshot               Create a snapshot of the database
    --dry-run                       Simulate a database snapshot operation. No changes are made
    --tags                          Display tags, then exit. No changes are made
    --sync-sequences                Synchronize all sequences post-deployment
    --ignore-git-tags               Continue deployment even if a Sqitch tag is missing in Git
    --source-type [empty|db|dump]   Specify the source type: a database name or a dump filename.
                                    Required if "--create-database" is specified, otherwise ignored
    --source [DBNAME|FILE]          Specify the name of the source database or dump file, depending on source type.
                                    Optional if "--create-database" is specified, otherwise ignored.
                                    Default: "sead_master_9" if "source_type" is "db"
                                    Default: "./starting_point/sead_master_9_public.sql.gz" if "source_type" is "dump"
                                    Default: "empty" if "source_type" is "empty" (value is ignored)
    --on-conflict [drop|rename]     Specify the action if the target database already exists: drop or rename it.
                                    Optional if "--create-database" is specified, otherwise ignored. Default: rename
    --deploy-to-tag TAG             Specify the Sqitch deploy tag. Optional. Set tag to "latest" for full deployment
    --deploy-from-tag TAG           Start deploy from tag TAG. Optional. Only valid for source type "db".
    --deploy-chain-to-tag TAG       Deploy the entire chain of databases up to the specified tag. Optional. Set tag to "latest" for full deployment
    --deploy-starting-point         Create a starting point, then exit
    --deploy-single-change-request  Only deploy given CR, then exit
    --deploy-single-change-request  Only deploy given CR, then exit
    --sqitch-project PROJECT        Specify the Sqitch project to deploy
    --rename-end-of-chain           Rename the last database in the chain to the target name (e.g. removes tag)

Examples:

1. Deploy changes to a new, empty database up to tag @2024.03:
   ./bin/deploy-staging --create-database --source-type empty --target-db-name sead_test --deploy-chain-to-tag @2022.12

2. Deploy changes to a new database based on sead_production_202401 up to tag @2024.03:
   ./bin/deploy-staging --create-database --source-type db --source sead_production_202401 --deploy-to-tag @2024.03

3. Deploy changes to a new database from starting point (sead_master_9 dump) up to tag @2024.03:
   ./bin/deploy-staging --create-database --source-type dump --target-db-name sead_test_202403 --deploy-to-tag @2024.03

4. Deploy the entire sequence of monthly databases starting from sead_master_9 and ending at tag @2022.12. The databases will be named sead_test_yyymmm based on tag. If a database already exists, it will be renamed to sead_test_yyymmm_YYYYMMDDHHMMSS:
   ./bin/deploy-staging --create-database --source-type dump --target-db-name sead_test --deploy-chain-to-tag @2022.12

EOF
)

function usage() {
    error_message="$1"
    if [ "$error_message" != "" ]; then
        error "$error_message"
    fi
    echo "$usage_message"
    exit 64
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --host)
            g_host="$2"; shift; shift
        ;;
        --user)
            g_user="$2"; shift; shift
        ;;
        --port)
            g_port="$2"; shift; shift
        ;;
        --target-db-name)
            g_target_name="$2"; shift; shift
        ;;
        --create-snapshot)
            g_create_snapshot="YES"; shift;
        ;;
        --dry-run)
            g_dry_run="YES"; shift;
        ;;
        --tags)
            g_display_tags="YES"; shift;
        ;;
        --sync-sequences)
            g_sync_sequences="YES"; shift;
        ;;
        --ignore-git-tags)
            g_ignore_git_tags="YES"; shift;
        ;;
        --create-database)
            g_create_database="YES"; shift;
        ;;
        --display-status)
            g_display_status="YES"; shift;
        ;;
        --source)
            g_source_name="$2";
            shift; shift
        ;;
        --sqitch-project)
            default_projects="$2";
            shift; shift
        ;;
        --source-type)
            g_source_type="$2";
            if [ "$g_source_name" == "" ]; then
                if [ "$g_source_type" == "dump" ]; then
                    g_source_name=${DEFAULT_SOURCE_DUMP_FILE}
                elif [ "$g_source_type" == "db" ]; then
                    g_source_name=${DEFAULT_SOURCE_DB_NAME}
                elif [ "$g_source_type" == "database" ]; then
                    g_source_name=${DEFAULT_SOURCE_DB_NAME}
                elif [ "$g_source_type" == "empty" ]; then
                    g_source_name="empty"
                else
                    error "source-type must be 'empty', 'dump' or 'db'"
                fi
            fi
            shift; shift
        ;;
        --deploy-to-tag)
            g_target_tag="$2"; shift; shift
        ;;
        --deploy-from-tag)
            g_start_tag="$2"; shift; shift
        ;;
        --deploy-chain-to-tag)
            g_target_chain_tag="$2"; shift; shift
        ;;
        --rename-end-of-chain-to-target-name)
            g_rename_end_of_chain="YES"; shift;
        ;;
        --deploy-starting-point)
            g_deploy_starting_point="YES"; shift;
        ;;
        --deploy-single-change-request)
            g_target_single_cr="$2"; shift; shift
        ;;
        --on-conflict)
            g_conflict_resolution="$2"; shift; shift;
        ;;
        --verbose)
            g_verbose="YES"; shift;
        ;;
        --*)
            usage "invalid option $1"
        ;;
        *)
            POSITIONAL+=("$1") # save it in an array for later
            shift
        ;;
    esac
done


function usage() {
    local error_message="$1"
    if [ "$error_message" != "" ]; then
        error "$error_message"
    fi
    echo "$usage_message"
    # if [ "$error_message" != "" ]; then
        exit 64
    # fi  
}

function verbose() {
    if [ "$g_verbose" == "YES" ]; then
        echo "$1"
    fi
}

function create_snapshot()
{

    if [ "${g_source_name}" == "" ]; then
        usage "you must specify source database name"
    fi

    if [ "${g_target_name}" != "" ] || [ "${g_target_tag}" != "" ]  || [ "${g_source_type}" == "dump" ] ; then
        usage "invalid options for snapshot"
    fi

    snapshot_name=./starting_point/${g_source_name}_`date "+%Y%m%d"`.sql

    if [ "$g_dry_run" == "YES" ]; then
        echo pg_dump -C -c --if-exists -d "${g_source_name}" -h "$g_host" -p "$g_port" -F p -U $g_user -f $snapshot_name
    else
        pg_dump -C -c --if-exists -d "${g_source_name}" -h "$g_host" -p "$g_port" -F p -U $g_user -f $snapshot_name
        gzip $snapshot_name
    fi
}

set -- "${POSITIONAL[@]}" # restore positional parameters

function verify_options()
{
    if [ "$g_display_tags" == "YES" ]; then
        return
    fi

    if [ "$g_host" == "" ]; then
        usage "host not specified. Use --host or set default in $DOT_HOST_FILE"
    fi

    if [ "$g_user" == "" ]; then
        usage "user not specified. Use --user or set default in $DOT_USER_FILE"
    fi

    if [ "$g_port" == "" ]; then
        usage "port not specified. Use --port PORT option"
    fi

    if [ "$g_create_snapshot" == "YES" ] && [ "$g_create_database" == "YES" ]; then
        usage "cannot create snapshot AND database at the same time"
    fi

    if [ "$(count_number_of_set "$g_target_chain_tag" "$g_target_tag" "$g_target_single_cr")" != "1" ]; then
        usage "you can only specify one of --deploy-to-tag, --deploy-chain-to-tag or --deploy-single-change-request"
    fi

    if [ "$g_create_snapshot" == "YES" ]; then
        return
    fi

    if [ "$g_target_single_cr" != "" ]; then
        if [ "$g_create_database" == "YES" ];  then
            usage "cannot create database and deploy single CR at the same time"
        fi
        if [ "${g_source_name}" != "" ] || [ "${g_source_type}" != "" ] ; then
            usage "--source and --source-type are not allowed when deploying single CR";
        fi
        return
    fi

    if [ "$g_start_tag" != "" ]; then
        if [ "$g_source_type" != "db" ]; then
            usage "start tag is only valid for source type db"
        fi
    fi

    if [ "$rename_end_of_chain" == "YES" ]; then
        if [ "$g_target_chain_tag" == "" ]; then
            usage "--rename-end-of-chain requires --deploy-chain-to-tag"
        fi
    fi

    if [ "$g_ignore_git_tags" != "YES" ]; then
        # Only one of these tags will be set
        check_that_sqitch_tags_exist_in_git "$g_target_tag$g_target_chain_tag" "YES"
    fi

    if [ "$g_target_name" == "sead_production" ]; then
        usage "you are **not** allowed to deploy directly to sead_production!";
    fi

    if [ "$g_create_database" == "NO" ]; then

        verbose "notice: using existing target database $g_target_name";
        verbose "  ==> Settings "source-db", "source-sql-file" and "source-type" is ignored.";

        if [ "${g_source_type}" != "" ] && [ "${g_source_type}" != "db" ]; then
            verbose "notice: ignoring option --source-type $g_source_type (using existing db)";
            g_source_type=db
        fi

        if [ "${g_source_name}" == "" ]; then
            error "missing option --source $g_source_name";
        fi

    elif [ "$g_create_database" == "YES" ]; then

        if [ "${g_source_type}" != "empty" ] && [ "${g_source_type}" != "db" ] && [ "${g_source_type}" != "dump" ]; then
            usage "you need to specify a valid source type (empty, dump or db) for new database";
        fi

        if [ "${g_source_name}" == "" ] && [ "$g_source_type" != "empty" ]; then
            usage "source ${g_source_type} name not specified"
        fi

    fi

}

function setup_credentials()
{
    if [ "$SQITCH_USERNAME" == "" ]; then
        export SQITCH_USERNAME=${g_user}
    fi

    if [ "$SQITCH_USERNAME" == "" ]; then
        usage "username not specified"
    fi

    if [ "$SQITCH_PASSWORD" == "" ]; then
        if [ -f "${DOT_SQITCH_FILE}" ]; then
            verbose "using credentials found in vault"
            source "${DOT_SQITCH_FILE}"
        else
            usage "password not specified (SQITCH_PASSWORD not defined and ${DOT_SQITCH_FILE} not found)"
        fi
    fi
}

function execute_sql() {
    database=$1
    sql=$2
    if [ "$g_dry_run" == "YES" ]; then
        echo psql -v ON_ERROR_STOP=1 --host=$g_host --port="$g_port" --username=$g_user --no-password --dbname=$database --command "$sql"
    else
        echo $sql >> $log_file
        psql -v ON_ERROR_STOP=1 --host=$g_host --port="$g_port" --username=$g_user --no-password --dbname=$database --command "$sql" >> $log_file
        if [ $? -ne 0 ];  then
            error "psql command failed! Deploy aborted." >&2
            exit 64
        fi
    fi
}

function dbexecgz() {
    database=$1
    gz_file=$2
    if [ "$g_dry_run" == "YES" ]; then
        info "executing file $gz_file on $database..."
    else
        verbose "executing file $gz_file..." >> $log_file
        zcat $gz_file | psql -v ON_ERROR_STOP=1 --host=$g_host --port="$g_port" --username=$g_user --no-password --dbname=$database >> $log_file
        if [ $? -ne 0 ];  then
            error "psql command failed! Deploy aborted." >&2
            exit 64
        fi
    fi
}

function kick_out_users() {
    local db=$1
    verbose "kicking out users from ${db}..."
    sql=$(cat <<____EOF
        select pg_terminate_backend(pg_stat_activity.pid)
        from pg_stat_activity
        where pg_stat_activity.datname in ('${db}')
          and pid <> pg_backend_pid();
____EOF
    )
    execute_sql "postgres" "$sql" >& /dev/null
}

function setup_target() {

    local target_name=$1
    local create_database=$2
    local source_type=$3
    local source_name=$4
    local conflict_resolution=$5

    if [ "$create_database" != "YES" ]; then
        verbose "using existing database ${target_name}..."
        return
    fi

    verbose "setting up a new database ${target_name}..."

    local target_db_exists="$( psql --host=$g_host --port="$g_port" --username=$g_user --no-password --dbname=postgres -tAc "select 1 from pg_database where datname='${target_name}'" )"

	if [ "$target_db_exists" == "1" ]; then

        kick_out_users $target_name

	    if [ "$conflict_resolution" == "rename" ]; then

            local deprecated_name=${target_name}_`date "+%Y%m%d%H%M%S"`

		    verbose "renaming ${target_name} to ${deprecated_name}..."

		    sql="alter database ${target_name} rename to ${deprecated_name};"
		    execute_sql "postgres" "$sql"

	    elif [ "$conflict_resolution" == "drop" ]; then

		    verbose "dropping ${target_name}..."

		    sql="drop database if exists ${target_name};"
		    execute_sql "postgres" "$sql"

	    else
		    error " target database ${target_name} exists. Drop database or use --on-conflict [drop|rename] to resolve"
		    exit 64
	    fi
	fi

	if [ "${source_type}" == "db" ]; then

	    if [ "${source_name}" == "" ]; then
		    usage " source database not specified"
	    fi

	    verbose "creating database ${target_name} using template ${source_name}..."
        kick_out_users $source_name
	    execute_sql "postgres" "create database ${target_name} with template ${source_name} owner sead_master;"

	elif [ "${source_type}" == "empty" ]; then

	    verbose "creating empty database ${target_name}..."
	    execute_sql "postgres" "create database ${target_name} owner sead_master;"
	    execute_sql "$target_name" "drop schema if exists public;"

	elif [ "${source_type}" == "dump" ]; then

	    if [ "${source_name}" == "" ]; then
		    usage " source sql.gz file not specified"
	    fi

	    verbose "creating database ${target_name} using dump \"$source_name\"..."
	    execute_sql "postgres" "create database ${target_name} owner sead_master;"

	    execute_sql "$target_name" "drop schema if exists public;"

	    verbose "applying source SQL script..."
	    dbexecgz "$target_name" "$source_name"

	    verbose "applying default permissions..."
        # FIXME: Loop and apply all gz-files found in starting_point/
	    dbexecgz "${target_name}" "./starting_point/role_permissions.sql.gz"

	fi

}


function sync_sequences()
{
    execute_sql "${g_target_name}" "select sead_utility.sync_sequences();"
}


function deployed_tags()
{
    local target_name=$1
    local target_project=$2
    local target_uri="db:pg://${g_user}@${g_host}:${g_port}/${target_name}"
    echo `sqitch status --target $target_uri -C ./$target_project --show-tags | grep -E "^# +@"| awk '{ print $2 ; }' ;`
}


function check_git_tags()
{
    local target_tag=$1
    local break_if_missing=$2
    local known_release_tags=$(grep --no-filename -E "^@" */sqitch.plan | cut --delimiter=' ' --fields=1 | sort | uniq)
    for tag in $known_release_tags; do
        check_that_sqitch_tags_exist_in_git $tag $break_if_missing
        if [ "$tag" == "$target_tag" ]; then
            break
        fi
    done
}

function check_that_sqitch_tags_exist_in_git()
{
    local tag=$1
    local break_if_missing=$2
    if ! git rev-parse "$tag" >/dev/null 2>&1; then
        if [ "$break_if_missing" == "YES" ]; then
            error "tag '$tag' does not exist in git."
            exit 64
        else
            warning "tag '$tag' does not exist in git."
        fi
    fi
}

function verify_target_database()
{
    local target_name=$1

    local target_db_exists="$( psql --host=$g_host --port=$g_port --username=$g_user --no-password --dbname=postgres -tAc "select 1 from pg_database where datname='${target_name}'" )"

    if [ "$target_db_exists" != "1" ]; then
        error "target ${target_name} does not exist"
        exit 64
    fi
}

function verify_project_names() {
    # Verifies that project name in sqitch plan and folder name matches for all projects
    local project_folders="$1"
    verbose "checking projects..."
    for folder in $project_folders; do
        project_name=$(awk -F'=' 'NR==2 {print $2}' "$folder/sqitch.plan")
        project_uri=$(awk -F'=' 'NR==3 {print $2}' "$folder/sqitch.plan")
        if [ "$project_name" != "$folder" ]; then
            error "project name $project_name differs from $folder name $project_name (please check sqitch.plan)"
            exit 64
        fi
        if [ "$project_uri" != "https://github.com/humlab-sead/$project_name" ]; then
            error "project uri $project_uri differs from expected https://github.com/humlab-sead/$project_name (please check sqitch.plan)"
            exit 64
        fi
    done
}

function find_tags()
{
    echo $(grep --no-filename -E "^@" */sqitch.plan | cut --delimiter=' ' --fields=1 | sort | uniq)
}

function deploy_to_tag()
{
    # Deploys all project to specified release tag

    local target_name=$1
    local target_tag=$2
    local source_type=$3

    if [ "$target_tag" == "" ]; then
        error "target deploy tag not specified"
        exit 0
    fi

    if [ "$target_tag" == "latest" ]; then
        target_tag=
    fi

    verify_target_database $target_name
    verify_project_names "$default_projects"

    if [ "$g_sync_sequences" == "YES" ] && [ "${source_type}" != "dump" ] && [ "${source_type}" != "empty" ]; then
        verbose "syncing sequences (prior to deploy)..."
	    sync_sequences
    fi

    local target_uri="db:pg://${g_user}@${g_host}:${g_port}/${target_name}"

    local known_release_tags=$(find_tags)

    for tag in $known_release_tags; do


        if [ "$g_start_tag" != "" ]; then
            if [ "$tag" != "$g_start_tag" ]; then
                verbose "skipping $tag (before start tag $g_start_tag)"
                continue
            fi
            g_start_tag=
        fi

        info "########################################################################################################################"
        info "deploying tag ${GREEN}${BOLD}$tag${RESET} to ${GREEN}${BOLD}$target_name${RESET}"
        info "########################################################################################################################"

        for sqitch_project in $default_projects; do

            if [ "$tag" != "" ]; then

                local tag_line=$(grep -e "^$tag " $sqitch_project/sqitch.plan)

                if [ "$tag_line" == "" ]; then
                    verbose "skipping $sqitch_project (has no tag $tag)"
                    continue
                fi
            fi

            IFS=$' ' read -ra v_deployed_tags <<< `deployed_tags $target_name $sqitch_project`
            echo $v_deployed_tags
            local is_deployed=false
            for item in "${v_deployed_tags[@]}"; do
                if [[ "$item" == "$tag" ]]; then
                    is_deployed=true
                    break
                fi
            done

            if $is_deployed; then
                verbose "skipping $sqitch_project ($tag already deployed in $target_name)"
                continue
            fi

            info "deploying ${GREEN}${BOLD}$sqitch_project${RESET} to ${GREEN}${BOLD}$tag${RESET}"

            local deploy_code=0

            if [ "$g_dry_run" == "YES" ]; then
                info "sqitch deploy --target ${target_uri} --mode change --no-verify -C $sqitch_project --to $tag"
                continue
            fi

            if [ -f "$sqitch_project/${tag}-pre-deploy-hook" ]; then
                info "running $sqitch_project/${tag}-pre-deploy-hook"
                "$sqitch_project/${tag}-pre-deploy-hook" --target $target_uri
            fi

            local sqitch_output_filename=$(mktemp)

            sqitch deploy --target ${target_uri} --mode change --no-pager --no-verify -C $sqitch_project --to $tag  --set "client_min_messages=WARNING" | cat &> $sqitch_output_filename

            deploy_code=$?

            #  | tee $sqitch_output_filename

            cat $sqitch_output_filename

            if grep -q "^not ok" $sqitch_output_filename; then
                deploy_code=1
            fi

            local deployed_crs=$(sed -E '/^[[:space:]]*\+/!d; s/^[[:space:]]*\+\s*([[:alnum:]_]+).*/\1/; ' "$sqitch_output_filename")

            if [ -f $sqitch_project/"${tag}-post-deploy-hook" ]; then
                info "running $sqitch_project/${tag}-post-deploy-hook..."
                "$sqitch_project/${tag}-post-deploy-hook" --target $target_uri
            fi

            if [ $deploy_code -ne 0 ];  then
                error "sqitch deploy FAILED! DB is in an undefined state." >&2
                exit 64
            fi

            while IFS= read -r cr; do
                local cr_post_deploy_hook="${sqitch_project}/deploy/${cr}/${cr}-post-deploy-hook"
                if [ -f "$cr_post_deploy_hook" ]; then
                    info "${BLUE}running ${cr_post_deploy_hook} $target_uri${RESET}"
                    ${cr_post_deploy_hook} "$target_uri" "$(realpath .)"
                fi
            done <<< "$deployed_crs"

            if [ "$g_sync_sequences" == "YES" ]; then
                info "syncing sequences (post deploy \"${sqitch_project}\")..."
                sync_sequences
            fi

        done

        if [ "$tag" == "$target_tag" ]; then
            break
        fi

    done
}

function deploy_single_cr()
{
    # Deploy a single change request

    local target_name=$1
    local cr_name=$2

    if [ "$cr_name" == "" ]; then
        error "CR to deploy not specified"
        exit 0
    fi
    
    local project=$(find_project "$cr_name")

    if [ -z "$project" ]; then
        error "$cr_name not found in any project"
        exit 64
    fi

    verify_target_database $target_name

    local target_uri="db:pg://${g_user}@${g_host}:${g_port}/${target_name}"

    info "deploying CR $cr_name"

    local echo_mode=

    if [ $g_dry_run == "YES" ]; then
        echo_mode="echo "
    fi

    $echo_mode sqitch deploy --target ${target_uri} --mode change --no-verify -C $project --to $cr_name

    if [ "$g_sync_sequences" == "YES" ]; then
        info "syncing sequences (post deploy \"${sqitch_project}\")..."
        $echo_mode sync_sequences
    fi

}

function deploy_chain_to_tag()
{
    # Deploys all databases in chain to specified release tag
    local target_name=$1
    local target_tag=$2
    local source_type=$3
    local source_name=$4

    local known_release_tags=$(grep --no-filename -E "^@" */sqitch.plan | cut --delimiter=' ' --fields=1 | sort | uniq)

    for tag in $known_release_tags; do

        tag_target_name=`echo ${target_name}_${tag} | tr -d '@.'`

        setup_target $tag_target_name $g_create_database $source_type $source_name $g_conflict_resolution
        deploy_to_tag $tag_target_name $tag $source_type

        if [ "$tag" == "$target_tag" ]; then
            break
        fi

        source_type="db"
        source_name=$tag_target_name

    done

    if [ "$g_rename_end_of_chain" == "YES" ]; then
        info "renaming last database to $g_target_name"
        execute_sql "postgres" "alter database ${tag_target_name} rename to ${g_target_name};"
    fi
}

function display_project_status()
{
    info "Changes not deployed in \"$g_target_name\":"
    target_uri="db:pg://${g_user}@${g_host}:${g_port}/${g_target_name}"

    for sqitch_project in $default_projects; do
        info "pending CRs \"$sqitch_project\": "

        sqitch status --target ${target_uri} -C $sqitch_project \
            | grep -v "^#" \
            | grep -v '^[[:space:]]*$$' \
            | grep -v "^Undeployed change" \
            | grep -v "^No changes deployed" \
            | grep -v "^Nothing to deploy";
        echo ;
    done
}

if [ "$g_display_tags" == "YES" ]; then
    find_tags
    exit 0
fi


mkdir -p logs

if [ "$g_display_status" == "YES" ]; then
    display_project_status
    exit 64
fi

if [ "$g_create_snapshot" == "YES" ]; then
    create_snapshot
    exit 64
fi

if [ "$g_deploy_starting_point" == "YES" ]; then
    setup_target $g_target_name $g_create_database $g_source_type $g_source_name $g_conflict_resolution
    exit 0
fi

git pull &> /dev/null

verify_options

setup_credentials

if [ "$g_target_single_cr" != "" ]; then
    deploy_single_cr $g_target_name $g_target_single_cr
elif [ "$g_target_chain_tag" != "" ]; then
    deploy_chain_to_tag "$g_target_name" "$g_target_chain_tag" "$g_source_type" "$g_source_name"
else
    if [ "$g_create_database" == "YES" ]; then
        setup_target $g_target_name $g_create_database $g_source_type $g_source_name $g_conflict_resolution
    fi
    deploy_to_tag $g_target_name $g_target_tag $g_source_type
fi

