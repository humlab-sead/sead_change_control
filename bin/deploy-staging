#!/bin/bash

export PGCLIENTENCODING=UTF8

#echo "x.x.1.181" >  ~/.default.sead.server
#echo "x" >  ~/.default.sead.username

default_source_db_name=sead_master_9
default_source_dump_file="./starting_point/sead_master_9_public.sql.gz"

dothostfile=~/vault/.default.sead.server
dotuserfile=~/vault/.default.sead.username
dotsqitchfile=~/vault/.sqitch.env

target_db_name=
create_database=NO
source_type=
source_name=
conflict_resolution=rename
create_snapshot=NO
dry_run=NO
display_status=NO
sync_sequences=NO
target_tag=

# sqitch_projects="utility general security subsystem sead_api"
default_projects="utility security general sead_api subsystem submissions"
sqitch_projects=$(find . -maxdepth 1 -mindepth 1 -type d -exec test -e {}/deploy \; -print)

default_server="humlabseadserv.srv.its.umu.se"

if [[ -f "$dothostfile" ]]; then
    dbhost=`cat $dothostfile`
fi
if [[ -f "$dotuserfile" ]]; then
    dbuser=`cat $dotuserfile`
fi

usage_message=$(cat <<EOF
usage: deploy-staging OPTIONS...

    --host SERVERNAME               Target server (${dbhost})
    --user USERNAME                 User on target server (${dbuser})
    --target-db-name DBNAME         Target database name. Mandatory.
    --create-database               Create a fresh database from given source.
    --create-snapshot               Create snapshot of database.
    --dry-run                       Create snapshot of database.
    --sync-sequences                Sync all sequences when deploy is done.
    --source-type [db|dump]         Source type i.e. a database name or a dump filename.
                                    Mandatory if "--create" is specified, else ignored.
    --source [DBNAME|FILE]          Name of source database or dump file depending on source type
                                    Optional if "--create" is specified, else ignored.
                                    Default "sead_master_9" if "source_type" is "db"
                                    Default "./starting_point/sead_master_9_public.sql.gz" if "source_type" is "dump"
    --on-conflict [drop|rename]     What to do if target database exists (rename)
                                    Optional if "--create" is specified, else ignored. Default rename.
    --deploy-to-tag TAG             Sqitch deploy to tag. Optional. Set tag to "latest" for full deploy.
    --sqitch-project PROJECT        Sqitch project to deploy


EOF
)

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --host)
            dbhost="$2"; shift; shift
        ;;
        --user)
            dbuser="$2"; shift; shift
        ;;
        --target-db-name)
            target_db_name="$2"; shift; shift
        ;;
        --create-snapshot)
            create_snapshot="YES"; shift;
        ;;
        --dry-run)
            dry_run="YES"; shift;
        ;;
        --sync-sequences)
            sync_sequences="YES"; shift;
        ;;
        --create-database)
            create_database="YES"; shift;
        ;;
        --display-status)
            display_status="YES"; shift;
        ;;
        --source)
            source_name="$2";
            shift; shift
        ;;
        --sqitch-project)
            sqitch_projects="$2";
            shift; shift
        ;;
        --source-type)
            source_type="$2";
            if [ "$source_name" == "" ]; then
                if [ "$source_type" == "dump" ]; then
                    source_name=${default_source_dump_file}
                elif [ "$source_type" == "db" ]; then
                    source_name=${default_source_db_name}
                elif [ "$source_type" == "database" ]; then
                    source_name=${default_source_db_name}
                else
                    echo "error: source-type must be db or dump"
                fi
            fi
            shift; shift
        ;;
        --deploy-to-tag)
            target_tag="$2"; shift; shift
        ;;
        --on-conflict)
            conflict_resolution="$2"; shift; shift;
        ;;
        *)
            POSITIONAL+=("$1") # save it in an array for later
            shift
        ;;
    esac
done

function usage() {

    echo "$usage_message"
}

function create_snapshot()
{

    if [ "${source_name}" == "" ]; then
        echo "error: you must specify source database name";
        usage
        exit 64
    fi

    if [ "${target_db_name}" != "" ] || [ "${target_tag}" != "" ]  || [ "${source_type}" == "dump" ] ; then
        echo "error: invalid options for snapshot";
        usage
        exit 64
    fi

    snapshot_name=./starting_point/${source_name}_`date "+%Y%m%d"`.sql

    if [ "$dry_run" == "YES" ]; then
        echo pg_dump -C -c --if-exists -d "${source_name}" -h "$dbhost" -F p -U $dbuser -f $snapshot_name
    else
        pg_dump -C -c --if-exists -d "${source_name}" -h "$dbhost" -F p -U $dbuser -f $snapshot_name
        gzip $snapshot_name
    fi
}

set -- "${POSITIONAL[@]}" # restore positional parameters


function verify_options()
{

    if [ "$dbhost" != "$default_server" ]; then
        echo "error: this script can for now only be run on $default_server";
        exit 64
    fi

    if [ "$create_snapshot" == "YES" ] && [ "$create_database" == "YES" ]; then
        echo "error: cannot create snapshot AND database at the same time"
        usage
        exit 64
    fi

    if [ "$create_snapshot" == "YES" ]; then
        return
    fi

    if [ "$target_db_name" == "" ]; then
        echo "error: you need to specify a target database";
        usage
        exit 64
    fi

    if [ "$target_db_name" == "sead_production" ]; then
        echo "error: you are not allowed to deploy directly to sead_production!";
        usage
        exit 64
    fi

    if [ "$create_database" == "NO" ]; then

        echo "notice: using existing target database $target_db_name";
        echo "  ==> Settings "source-db", "source-sql-file" and "source-type" is ignored.";

        if [ "${source_type}" != "" ]; then
            echo "notice: ignoring option --source-type $source_type (using existing db)";
        fi

        if [ "${source_name}" != "" ]; then
            echo "notice: ignoring option --source $source_name (using existing db)";
        fi

    elif [ "$create_database" == "YES" ]; then

        if [ "${source_type}" != "db" ] && [ "${source_type}" != "dump" ]; then
            echo "error: you need to specify a db source type (db or dump) for new database";
            usage
            exit 64
        fi

        if [ "${source_type}" == "" ]; then
            echo "error: source type must be specified when --create  is specified"
            usage
            exit 64
        fi

        if [ "${source_name}" == "" ]; then
            echo "error: source ${source_type} name not specified"
            usage
            exit 64
        fi

    fi

}

function setup_credentials()
{

    if [ "$SQITCH_USERNAME" == "" ]; then
        export SQITCH_USERNAME=${dbuser}
    fi

    if [ "$SQITCH_USERNAME" == "" ]; then
        echo "error: username not specified"
        usage
        exit 64
    fi

    if [ "$SQITCH_PASSWORD" == "" ]; then
        if [ -f "${dotsqitchfile}" ]; then
            echo "info: using credentials found in vault"
            source "${dotsqitchfile}"
        else
            echo "error: password not specified (SQITCH_PASSWORD not defined and ${dotsqitchfile} not found)"
            usage
            exit 64
        fi
    fi
}

function dbexec() {
    db_name=$1
    sql=$2
    if [ "$dry_run" == "YES" ]; then
        echo psql -v ON_ERROR_STOP=1 --host=$dbhost --username=$dbuser --no-password --dbname=$db_name --command "$sql"
    else
        echo $sql >> $log_file
        psql -v ON_ERROR_STOP=1 --host=$dbhost --username=$dbuser --no-password --dbname=$db_name --command "$sql" >> $log_file
        if [ $? -ne 0 ];  then
            echo "fatal: psql command failed! Deploy aborted." >&2
            exit 64
        fi
    fi
}

function dbexecgz() {
    db_name=$1
    gz_file=$2
    if [ "$dry_run" == "YES" ]; then
        echo "info: executing file $gz_file on $db_name..."
    else
        echo "info: executing file $gz_file..." >> $log_file
        zcat $gz_file | psql -v ON_ERROR_STOP=1 --host=$dbhost --username=$dbuser --no-password --dbname=$db_name >> $log_file
        if [ $? -ne 0 ];  then
            echo "fatal: psql command failed! Deploy aborted." >&2
            exit 64
        fi
    fi
}

function kick_out_users() {
    echo "info: kicking out users from ${source_name} and ${target_db_name}..."
    sql=$(cat <<____EOF
        select pg_terminate_backend(pg_stat_activity.pid)
        from pg_stat_activity
        where pg_stat_activity.datname in ('${target_db_name}', '${source_name}')
          and pid <> pg_backend_pid();
____EOF
    )
    dbexec "postgres" "$sql" >& /dev/null
}

function setup_target() {

    if [ "$create_database" != "YES" ]; then
        echo "info: using existing database ${target_db_name}..."
        return
    fi

    echo "info: setting up a new database ${target_db_name}..."

    target_db_exists="$( psql --host=$dbhost --username=$dbuser --no-password --dbname=postgres -tAc "select 1 from pg_database where datname='${target_db_name}'" )"

	if [ "$target_db_exists" = "1" ]
	then

	    if [ "$conflict_resolution" == "rename" ]; then

            deprecated_name=${target_db_name}_`date "+%Y%m%d%H%M%S"`

		    echo "info:  renaming ${target_db_name} to ${deprecated_name}..."

		    sql="alter database ${target_db_name} rename to ${deprecated_name};"
		    dbexec "postgres" "$sql"

	    elif [ "$conflict_resolution" == "drop" ]; then

		    echo "info:  dropping ${target_db_name}..."

		    sql="drop database if exists ${target_db_name};"
		    dbexec "postgres" "$sql"

	    else
		    echo "error:  target database ${target_db_name} exists. Drop database or use --on-conflict [drop|rename] to resolve"
		    exit 64
	    fi
	fi

	if [ "${source_type}" == "db" ]; then

	    if [ "${source_name}" == "" ]; then
		    echo "error:  source database not specified"
		    usage
		    exit 64
	    fi

	    echo "info:  creating database ${target_db_name} using template ${source_name}..."
	    dbexec "postgres" "create database ${target_db_name} with template ${source_name} owner sead_master;"

	elif [ "${source_type}" == "dump" ]; then

	    if [ "${source_name}" == "" ]; then
		    echo "error:  source sql.gz file not specified"
		    usage
		    exit 64
	    fi

	    echo "info:  creating database ${target_db_name} using dump \"$source_name\"..."
	    dbexec "postgres" "create database ${target_db_name} owner sead_master;"

	    dbexec "$target_db_name" "drop schema if exists public;"

	    echo "info:  applying source SQL script..."
	    dbexecgz "$target_db_name" "$source_name"

	    echo "info:  applying default permissions..."
        # FIXME: Loop and apply all gz-files found in starting_point/
	    dbexecgz "${target_db_name}" "./starting_point/role_permissions.sql.gz"

	fi

}


function sync_sequences()
{
    dbexec "${target_db_name}" "select sead_utility.sync_sequences();"
}

function deploy_to_tag()
{
    # Deploys all project to specified release tag
    # TODO: Releases all previous tags up unitl to target tag project by project.
    #       This must be changed so that a release are made tag-by-tag over all projects

    if [ "$target_tag" == "" ]; then
        echo "error: target deploy tag not specified"
        exit 0
    fi

    if [ "$target_tag" == "latest" ]; then
        target_tag=
    fi

    target_tag_option=
    if [ "$target_tag" != "" ]; then
        target_tag_option="--to $target_tag"
    fi

    target_db_exists="$( psql --host=$dbhost --username=$dbuser --no-password --dbname=postgres -tAc "select 1 from pg_database where datname='${target_db_name}'" )"

    if [ "$target_db_exists" != "1" ]; then
        echo "error: target ${target_db_name} does not exist"
        exit 64
    fi

    if [ "$sync_sequences" == "YES" ] && [ "${source_type}" != "dump" ]; then
        echo "info: syncing sequences (prior to deploy)..."
	    sync_sequences
    fi

    target_uri="db:pg://${dbuser}@${dbhost}/${target_db_name}"

    for sqitch_project in $sqitch_projects; do

        if [ "$target_tag" != "" ]; then

            grep -e "^$target_tag " $sqitch_project/sqitch.plan

            tag_line=$(grep -e "^$target_tag " $sqitch_project/sqitch.plan)
            echo "$tag_line"

            if [ "$tag_line" == "" ]; then
                echo "info: skipping $sqitch_project (has no tag $target_tag)"
                continue
            fi

        fi

        echo "info: deploying $sqitch_project to $target_tag"

        if [ $dry_run == "YES" ]; then
            echo "info: sqitch deploy --target ${target_uri} --mode change --no-verify -C $sqitch_project" $target_tag_option ;
        else
            sqitch deploy --target ${target_uri} --mode change --no-verify -C $sqitch_project $target_tag_option # >> $log_file
        fi

        if [ $? -ne 0 ];  then
            echo "failure: sqitch deploy FAILED! DB is in an undefined state." >&2
            exit 64
        fi

        if [ "$sync_sequences" == "YES" ]; then
            echo "info: syncing sequences (post deploy \"${sqitch_project}\")..."
            sync_sequences
        fi

    done

    # less $log_file

}

function display_project_status()
{
    echo "info: Changes not deployed in \"$target_db_name\":"
    target_uri="db:pg://${dbuser}@${dbhost}/${target_db_name}"

    for sqitch_project in $sqitch_projects; do
        echo "info: pending CRs \"$sqitch_project\": "

        sqitch status --target ${target_uri} -C $sqitch_project \
            | grep -v "^#" \
            | grep -v '^[[:space:]]*$$' \
            | grep -v "^Undeployed change" \
            | grep -v "^No changes deployed" \
            | grep -v "^Nothing to deploy";
        echo ;
    done
}

mkdir -p logs

log_file="logs/"`date "+%Y%m%d%H%M%S"`_"deploy_${target_db_name}_${source_type}.log"

if [ "$display_status" == "YES" ]; then
    display_project_status
    exit 64
fi

if [ "$create_snapshot" == "YES" ]; then
    create_snapshot
    exit 64
fi

git pull &> /dev/null

verify_options
setup_credentials
kick_out_users

setup_target
deploy_to_tag
