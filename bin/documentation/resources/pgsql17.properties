#
# see http://schemaspy.org/dbtypes.html
# for configuration / customization details
#
dbms=PostgreSQL
description=PostgreSQL 17 Compatibility
connectionSpec=jdbc:postgresql://<hostOptionalPort>/<db>
host=host where database resides with optional port
port=port database is listening on
db=database name

driver=org.postgresql.Driver

# selectViewsSql
# selectIndexesSql
# selectPrimaryKeysSql
# selectViewCommentsSql
# selectViewColumnCommentsSql
# selectTableIdsSql
# selectIndexIdsSql

# Return text that represents a specific :view / :schema
selectViewSql=SELECT definition AS view_definition FROM pg_views WHERE schemaname = :schema AND viewname = :table \
UNION \
SELECT definition AS view_definition FROM pg_matviews WHERE schemaname = :schema AND matviewname = :table
viewTypes=VIEW,MATERIALIZED VIEW

# Get schema names and descriptions
selectSchemasSql=SELECT nspname AS schema_name, \
pg_catalog.obj_description(oid, 'pg_namespace') AS schema_comment \
FROM pg_catalog.pg_namespace \
WHERE nspname = :schema

# Get database (catalog) names and descriptions
selectCatalogsSql=SELECT datname AS catalog_name, \
pg_catalog.shobj_description(d.oid, 'pg_database') AS catalog_comment \
FROM pg_catalog.pg_database d \
WHERE datname = :catalog

# Get table information
selectTablesSql=SELECT \
    pt.schemaname AS table_schema, \
    pt.tablename AS table_name, \
    obj_description(pc.oid, 'pg_class') AS table_comment, \
    pc.reltuples AS table_rows \
FROM pg_tables pt \
JOIN pg_class pc \
  ON pt.tablename = pc.relname \
 AND pc.relkind = 'r'\
JOIN pg_namespace pn \
  ON pc.relnamespace = pn.oid \
 AND pn.nspname = pt.schemaname \
WHERE pt.schemaname = :schema \
  AND pt.tablename NOT IN ('tbl_dataset_methods', 'tbl_updates_log') \
  AND pt.tablename NOT LIKE 'tbl_isotop%' \
  AND pt.tablename NOT LIKE 'tbl_dendro%' \
  AND pt.tablename NOT LIKE 'tbl_aggreg%' 

# Get routine (function/aggregate) information
selectRoutinesSql=SELECT \
    r.routine_name || '(' || pg_catalog.pg_get_function_identity_arguments(p.oid) || ')' AS routine_name, \
    CASE WHEN p.prokind = 'a' THEN 'AGGREGATE' ELSE 'FUNCTION' END AS routine_type, \
    CASE WHEN p.proretset THEN 'SETOF ' ELSE '' END || \
    CASE WHEN r.data_type = 'USER-DEFINED' THEN r.type_udt_name ELSE r.data_type END AS dtd_identifier, \
    r.external_language AS routine_body, \
    r.routine_definition, \
    r.sql_data_access, \
    r.security_type, \
    r.is_deterministic, \
    d.description AS routine_comment \
FROM information_schema.routines r \
LEFT JOIN pg_namespace ns ON r.routine_schema = ns.nspname \
LEFT JOIN pg_proc p ON r.specific_name = p.proname || '_' || CAST(p.oid AS TEXT) \
LEFT JOIN pg_description d ON d.objoid = p.oid \
WHERE r.routine_schema = :schema

selectColumnCommentsSql=SELECT table_name, column_name,  pg_catalog.col_description(c.oid, cast(cols.ordinal_position as int)) AS comments \
FROM information_schema.columns cols \
JOIN pg_catalog.pg_class c ON c.relname = cols.table_name \
JOIN pg_catalog.pg_namespace n  \
  ON n.oid = c.relnamespace \
 AND n.nspname = cols.table_schema \
WHERE cols.table_schema = :schema \
  AND column_name not in ('date_updated')  \
  AND column_name not like '%uuid' \
  AND table_name like 'tbl_%' \
  AND table_name not in ('tbl_imported_taxa_replacements',  'tbl_updates_log', 'tbl_dataset_methods') \
  AND table_name not like 'tbl_aggregate%' \
  AND table_name not like 'tbl_dendro%' \
  AND table_name not like 'tbl_isotope%' \
ORDER BY table_name, column_name;


selectColumnTypesSql=SELECT \
    c.table_name, \
    c.column_name, \
    CASE  \
        WHEN t.typtype = 'e' THEN 'enum(' || STRING_AGG(e.enumlabel, ', ') || ')' \
        ELSE c.udt_name ||  \
            CASE  \
				WHEN c.udt_name like 'int%' then '' \
                WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' \
                WHEN c.numeric_precision IS NOT NULL THEN '(' || c.numeric_precision || ',' || c.numeric_scale || ')' \
                ELSE '' \
            END \
    END AS column_type, \
    CASE  \
        WHEN t.typtype = 'e' THEN 'enum' \
		WHEN c.udt_name = 'varchar' then 'text' \
		WHEN c.udt_name like 'timestamp%' then 'timestamp' \
        ELSE c.data_type \
    END AS short_column_type \
FROM information_schema.columns c \
LEFT JOIN pg_namespace n ON n.nspname = c.table_schema \
LEFT JOIN pg_type t ON t.typname = c.udt_name \
LEFT JOIN pg_enum e ON e.enumtypid = t.oid \
WHERE c.table_schema = :schema \
GROUP BY c.table_name, c.column_name, c.data_type, c.udt_name, c.character_maximum_length, c.numeric_precision, c.numeric_scale, t.typtype;


# Get routine parameters
selectRoutineParametersSql=SELECT \
    r.routine_name || '(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' AS specific_name, \
    COALESCE(p.parameter_name, '$' || p.ordinal_position) AS parameter_name, \
    p.data_type AS dtd_identifier, \
    p.parameter_mode \
FROM information_schema.parameters p \
LEFT JOIN information_schema.routines r ON r.specific_name = p.specific_name \
LEFT JOIN pg_proc pp ON r.specific_name = pp.proname || '_' || CAST(pp.oid AS TEXT) \
WHERE p.specific_schema = :schema \
ORDER BY p.specific_name, p.ordinal_position

# Get check constraints (excluding NOT NULL constraints)
selectCheckConstraintsSql=SELECT \
    tc.table_name, \
    tc.constraint_name, \
    cc.check_clause AS text \
FROM information_schema.check_constraints cc \
LEFT JOIN information_schema.table_constraints tc ON tc.constraint_schema = cc.constraint_schema \
    AND tc.constraint_name = cc.constraint_name \
WHERE cc.constraint_name NOT LIKE '%not_null' \
AND tc.constraint_schema = :schema

# Get sequence information
selectSequencesSql=SELECT \
    sequencename AS sequence_name, \
    CAST(start_value AS BIGINT), \
    increment_by AS increment \
FROM pg_sequences \
WHERE schemaname = :schema

# Get row count for a table
selectRowCountSql=SELECT case when CAST(reltuples AS BIGINT) < 0 then 0 else CAST(reltuples AS BIGINT) end AS row_count FROM pg_class WHERE oid = CAST((:schema || '.' || :table) AS regclass)
