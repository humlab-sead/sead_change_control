#!/bin/bash

source .env

g_host=
g_user=
g_port=5433
g_target_folder="./docs"
g_verbose=NO
g_database=sead_staging
g_schema=public
g_script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
g_script_name="${BASH_SOURCE[0]}"
g_create_documentation=YES
g_update_image=NO
g_update_layout_folder=NO
g_local_imagename=schemaspy:humlab

g_deploy_to_github_pages=NO
g_schemaspy_repository=git@github.com:roger-mahler/schemaspy
g_organization=humlab-sead
g_repository=sead-schema
 
if [ "$g_host" == "" ]; then
    if [ -f ~/vault/.default.sead.server ]; then
        g_host=`cat ~/vault/.default.sead.server`;
    else
        g_host=$(hostname -A);
    fi
fi

if [ "$g_user" == "" ]; then
    if [ -f ~/vault/.default.sead.username ]; then
        g_user=`cat ~/vault/.default.sead.username`;
    fi
fi

if [ -f ~/vault/.default.sead.password ]; then
    export PGPASSWORD=$(cat ~/vault/.default.sead.password)
fi

usage_message=$(cat <<EOF
usage: $g_script_name DBNAME SCHEMANAME OPTIONS

    --host SERVERNAME               Target server (${g_host})
    --user USERNAME                 User on target server (${g_user})
    --port PORT                     Server port on target server (${g_port})
    --target-folder FOLDER          Store in folder ($g_target_folder)
    --verbose                       Print progress ($g_verbose).
    --update-image                  Update the SchemaSpy image ($g_update_image).
    --update-layout-folder          Update local copy of the SchemaSpy layout folder ($g_update_layout_folder).
    --deploy-to-github-pages        Deploy to GitHub Pages ($g_deploy_to_github_pages).
    --no-create-documentation       Skip creating documentation ($g_create_documentation).
EOF
)

function usage() {
    echo "$usage_message";
    exit 64
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --host)
            g_host="$2"; shift; shift
        ;;
        --port)
            g_port="$2"; shift; shift
        ;;
        --user)
            g_user="$2"; shift; shift
        ;;
        --target-folder)
            g_target_folder="$2"; shift; shift
        ;;
        --verbose)
            g_verbose="YES"; shift;
        ;;
        --update-image)
            g_update_image="YES"; shift;
        ;;
        --update-layout-folder)
            g_update_layout_folder="YES"; shift;    
        ;;
        --deploy-to-github-pages)
            g_deploy_to_github_pages="YES"; shift;
        ;;
        --no-create-documentation)
            g_create_documentation="NO"; shift;
        ;;
        --*)
            usage "error: unknown option $1"
        ;;
        *)
            POSITIONAL+=("$1") # save it in an array for later
            shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

g_database=$1
g_schema=$2

if [ "$g_database" == "" ] || [ "$g_schema" == "" ]; then
    usage;
fi

function dbexec() {
    local sql="$1"
    psql -v ON_ERROR_STOP=1 -h $g_host -U $g_user -d $g_database -p $g_port --no-password --command "$sql"
    if [ $? -ne 0 ];  then
        echo "fatal: psql command failed! script aborted." >&2
        exit 64
    fi
}

function setup_github_pages()
{
    local source_folder=${HOME}/source
    local description="SEAD Schema Explorer"
    local homepage="https://humlab-sead.github.io/sead-schema"

	pushd "$source_folder"

	gh repo create $g_organization/$g_repository --private --owner $g_organization --description $description --homepage $g_github_pages_url --confirm
	git clone git@github.com:$g_organization/$g_repository
	cd $g_repository
	git checkout --orphan gh-pages
	git commit --allow-empty -m "Initial empty commit for GitHub Pages"
	git push origin gh-pages

	popd
}

function deploy_to_github_pages()
{
    local folder=$(realpath $g_target_folder)
    local commit_message="Deploy to GitHub Pages"
    local repository="https://github.com/$g_organization/$g_repository"
    local homepage="https://humlab-sead.github.io/sead-schema"

    if ! command -v "ghp-import" >/dev/null; then
        echo "error: ghp-import not found (please install with pix install ghp-import)..."
        exit 1
    fi
    
    ghp-import -n -p -f -m "${commit_message}" -r $repository ${folder}

    echo "Deployment to GitHub Pages completed successfully."
}

# Use the image from the forked repository (roger-mahler/schemaspy) with postgresql 17 support
SCHEMASPY_IMAGE=schemaspy:humlab
#SCHEMASPY_IMAGE=schemaspy/schemaspy:latest

function create_documentation()
{

    local user_id=$(id -u)
    local group_id=$(id -g)
    local folder=$(realpath $g_target_folder)

    mkdir -p $folder

    cp $g_script_dir/resources/pgsql17.properties $folder/pgsql17.properties

    # https://schemaspy.readthedocs.io/en/latest/configuration/commandline.html

    docker run --rm \
        -v "$folder":/output \
        --user "$user_id:$group_id" \
        $SCHEMASPY_IMAGE \
        -p $PGPASSWORD \
        -t /output/pgsql17.properties \
        -host "$g_host" \
        -port "$g_port" \
        -db "$g_database" \
        -s "$g_schema" \
        -u "$g_user" \
        -template /output/layout

        # -norows
        # -noviews
        # -nopages
        # -noTablePaging
        # -noDbObjectPaging

    # fix faulty HTML
    
    sed -Ez 's|"defaultValue":\s*"\n([^"]+)",|"defaultValue": "",|g' $folder/columns.html > /tmp/columns.html

    mv /tmp/columns.html $folder/columns.html

}

function update_layout_folder()
{
    local folder=$(realpath $g_target_folder)
  
    # Copy the layout folder from the schemaspy image

    container_id=$(docker create $g_local_imagename) &> /dev/null
    docker cp $container_id:/usr/local/lib/schemaspy/schemaspy-app.jar /tmp/schemaspy-app.jar  &> /dev/null
    docker rm $container_id &> /dev/null

    pushd /tmp &> /dev/null
    jar xf /tmp/schemaspy-app.jar BOOT-INF/classes/layout
    rm -rf $folder/layout
    mv BOOT-INF/classes/layout $folder/
    rm -rf /tmp/schemaspy-app.jar
    popd &> /dev/null
    
    # Clone the layout folder from the schemaspy repository
    # pushd "$folder"
    # rm -rf $folder/layout
    # git clone --depth 1 https://github.com/schemaspy/schemaspy
    # mv $folder/schemaspy/src/main/resources/layout $folder/
    # rm -rf $folder/schemaspy
    # popd
}

function update_forked_image()
{
	pushd /tmp
	git clone ${g_schemaspy_repository}
	cd schemaspy
	git checkout added-pgsql17-properties
	./mvnw clean package
	docker build -t ${g_local_imagename} -f Dockerfile .
	popd
	rm -rf /tmp/schemaspy
}

if [ ! -d "$(realpath $g_target_folder)/layout" ]; then
    g_update_layout_folder=YES
fi

if [ "$g_update_layout_folder" == "YES" ]; then
    update_layout_folder
fi

cp -f $g_script_dir/resources/* $(realpath $g_target_folder)/layout
cp -f $g_script_dir/resources/tables/* $(realpath $g_target_folder)/layout/tables

if [ "$g_update_image" == "YES" ]; then
    update_forked_image
    # docker pull schemaspy/schemaspy:latest
fi

if [ "$g_create_documentation" == "YES" ]; then
    create_documentation
fi

if [ "$g_deploy_to_github_pages" == "YES" ]; then
    deploy_to_github_pages
fi
