#!/bin/bash

source .env

g_host=
g_user=
g_port=5433
g_database=sead_staging
g_filename=resources/tables_and_columns.xlsx
g_script_name="${BASH_SOURCE[0]}"

if [ "$g_host" == "" ]; then
    if [ -f ~/vault/.default.sead.server ]; then
        g_host=`cat ~/vault/.default.sead.server`;
    else
        g_host=$(hostname -A);
    fi
fi

if [ "$g_user" == "" ]; then
    if [ -f ~/vault/.default.sead.username ]; then
        g_user=`cat ~/vault/.default.sead.username`;
    fi
fi

if [ -f ~/vault/.default.sead.password ]; then
    export PGPASSWORD=$(cat ~/vault/.default.sead.password)
fi

usage_message=$(cat <<EOF
usage: $g_script_name FILENAME OPTIONS

    --host SERVERNAME               Target server (${g_host})
    --user USERNAME                 User on target server (${g_user})
    --port PORT                     Server port on target server (${g_port})
    --database DATABASE             Database on target server (${g_database})
EOF
)

function usage() {
    if [ "$1" != "" ]; then
        echo "error: $1" >&2
    fi
    echo "$usage_message";
    exit 64
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --host)
            g_host="$2"; shift; shift
        ;;
        --port)
            g_port="$2"; shift; shift
        ;;
        --user)
            g_user="$2"; shift; shift
        ;;
        --database)
            g_database="$2"; shift; shift
        ;;
        *)
            POSITIONAL+=("$1")
            shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}"

g_filename=$1

if [ "$g_filename" == "" ]; then
    usage "filename is missing";
fi

function dbexec() {
    local sql="$1"
    psql -v ON_ERROR_STOP=1 -h $g_host -U $g_user -d $g_database -p $g_port --no-password --command "$sql"
    if [ $? -ne 0 ];  then
        echo "error: psql command failed! script aborted." >&2
        exit 64
    fi
}

function extract_comments_to_csv()
{
    local filename=$1
    local target_filename=$2

    if command -v xlsx2csv &> /dev/null
    then
        xlsx2csv $filename -n "Tables & Columns" -d $',' | csvcut -d $',' -c schema_name,table_name,column_name,comment > $target_filename
    else
        usage "xlsx2csv is not installed. Please install it using 'pipx install xlsx2csv'"
    fi

}


function upload_csv()
{
    local filename=$1
    dbexec "call sead_utility.setup_comments();" &> /dev/null
    dbexec "\copy sead_utility.temp_comments (schema_name,table_name,column_name,comment) from '$filename' with delimiter ',' csv header;" &> /dev/null
    dbexec "call sead_utility.sync_comments();" &> /dev/null
}

g_target_filename=/tmp/sead_comments.$(date +%Y%m%d%H%M%S).csv
extract_comments_to_csv $g_filename $g_target_filename
upload_csv $g_target_filename
