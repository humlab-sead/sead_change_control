#!/bin/bash

SHELL=/bin/bash

set -e

usage_message=$(cat <<EOF
usage: add-issue --change CR --body BODY OPTIONS...

Uses Github CLI tool "gh" to a add new issue to Github. The issue will be named after the change and will have a text BODY added to it.
You can optionally add a label (defaults to "change-request") and assignee (defaults to "@me").
A URL link to the Github issue will be added to the Sqitch project plan.
A URL link to the CRs SQL deploy file will be added to the issue body.

If an existing issue is specified (--issue-id), then this issue will be related to the CR instead of creating a new one.

If change is not found, no action is taken.

    --change CR             Change that new issue will belong to.
    --project NAME          Project change belongs to.
    --body BODY             Text that will be added to issue.
    --label LABEL           Labels (comma seperated) that will added to issue.
    --assignee USER         Github user issue will be assigned to (default @me).
    --issue-id ISSUE        Use issue ISSUE instead of creating a new one.
    --no-update-plan        Do not add URL link to ISSUE in Sqitch project plan.
    --use-plan-co           Add CR's comment in Sqitch plan to issue body.
    --close-issue           Close issue when done.

Example:

bin/add-issue --change YYYYMMDD_XYZ --project general --label bugs --body "Some text" --close-issue

EOF
)

function usage() {
    echo "$usage_message"
}

g_change=
g_project=
g_today=$(date +%Y-%m-%d)
g_issue_id=
g_label="change-request"
g_assignee="@me"
g_body="To be documented. Placeholder issue for change request."
g_close=NO
g_update_plan=YES
g_use_plan_comment=NO
g_comment=
g_issue_id=

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --change|-c)
            g_change="$2";
            shift 2;
        ;;
        --project|-f|-C|--plan-file)
            g_project="$2";
            shift 2;
        ;;
        --body|-b)
            g_body="$2";
            shift 2;
        ;;
        --label|-l)
            g_label="$g_label,$2";
            shift 2;
        ;;
        --assignee|-a)
            g_assignee="$2";
            shift 2;
        ;;
        --issue-id)
            g_issue_id="$2";
            shift 2;
        ;;
        --no-update-plan|-u)
            g_update_plan="NO";
            shift;
        ;;
        --close-issue|-x)
            g_close="YES";
            shift;
        ;;
        --use-plan-comment|-r)
            g_use_plan_comment="YES";
            shift;
        ;;
        --help|-h)
            usage
            exit 0
        ;;
        --*)
            echo "error: invalid option $1"
            usage
            exit 64 
        ;;
        *)
            POSITIONAL+=("$1")
            shift
        ;;
    esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -z "$g_change" ] || [ -z "$g_project" ] || [ -z "$g_body" ]; then
    echo "error: missing required option --project, --change or --body"
    exit 64
fi

if [ ! -f "$g_project/sqitch.plan" ]; then
    echo "Project $g_project does not exist"
    exit 64
fi

if [ ! -f "$g_project/deploy/${g_change}.sql" ]; then
    echo "Change $g_project/deploy/${g_change}.sql does not exist"
    exit 64
fi

if [ "$g_use_plan_comment" == "YES" ]; then
    g_comment=$(awk -v keyword="$g_change" '$1 == keyword { match($0, /#(.*)$/); print substr($0, RSTART+1, RLENGTH-1) }' $g_project/sqitch.plan)
fi

issue_body=$(cat <<EOF

Change project: Created CR [$g_project](https://github.com/humlab-sead/sead_change_control/blob/master/${g_project}/sqitch.plan)
Change request: Created CR [$g_change](https://github.com/humlab-sead/sead_change_control/blob/master/${g_project}/deploy/${g_change}.sql)

$g_body
$g_comment

EOF
)

# echo $issue_body

g_issue_url=

if [ "$g_issue_id" == "" ]; then

    # echo "info: gh issue create --title "$g_change" --body "$issue_body" --label "change-request" --assignee @me,roger-mahler"

    g_issue_url=$(gh issue create \
        --title "$g_change" \
        --body "$issue_body" \
        --label "$g_label" \
        --assignee @me,roger-mahler \
    )

    g_issue_id=$(basename "$g_issue_url")

    echo "info: new issue ${g_issue_id} created ($g_issue_url)"

else

    gh issue comment ${g_issue_id} --body "$issue_body"
    # gh issue label ${g_issue_id} --body "$issue_body"

    g_issue_url="https://github.com/humlab-sead/sead_change_control/issues/${g_issue_id}"

fi


if [ "$g_close" == "YES" ]; then
    gh issue close $g_issue_id
    echo "info: issue ${g_issue_id} closed"
fi

update_plan() {
    local project_name="$1"
    local change_name="$2"
    local issue_url="$3"

    file_name="$project_name/sqitch.plan"

    awk -v keyword="$change_name" -v comment="$issue_url: " '
        $1 == keyword {sub(/#/, "# " comment)} 
        1' $file_name  > temp.txt && mv -f temp.txt $file_name

}

if [ "$g_update_plan" == "YES" ]; then
    update_plan "$g_project" "$g_change" "$g_issue_url"
    echo "info: plan ${g_project}/sqitch.plan updated"
fi
