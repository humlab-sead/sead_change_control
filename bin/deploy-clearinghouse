#!/bin/bash

SHELL=/bin/bash

set -e

g_script_name=`basename "$0"`
g_work_folder=./tmp
g_sql_folder=
g_force=NO
g_mode=dryrun
g_project=subsystem
g_on_schema_exists=drop
g_author="Roger MÃ¤hler"
g_cr_name=20191217_DDL_CLEARINGHOUSE_SYSTEM

g_real_path=$(readlink -f "${BASH_SOURCE[0]}")
g_sccs_folder=$(dirname "$g_real_path")

function usage() {
    if [ "$1" != "" ]; then
        echo "error: $1"
    fi
    echo "usage: $g_script_name [--mode update|new|dryrun] [--sql-folder FOLDER] [--force] "
    echo "       advanced option: [--work-folder FOLDER] [--change CR-NAME] --on-schema-exists=drop|abort|update"
    echo ""
    echo "       --mode dryrun|update|new Whether to update existing change request or add a new one to SEAD Control System"
    echo "               dryrun           Generate change request in target folder but do not update or add to SEAD Control System"
    echo "               update           Update deploy script in existing change request in SEAD Control System"
    echo "               new              Add new change request to SEAD Control System. Mandatory."
    echo "       --sql-folder FOLDER      Clearinghouse SQL scripts folder. Mandatory."
    echo "       --force                  Force overwrite of existing temporary folder exists"
    echo "       --work-folder FOLDER     Override default temporary dir (not recommended)"
    echo "       --change                 Override default change request name (default $g_cr_name)"
    echo "       --on-schema-exists       What to do (in deploy script) if schema exists: drop, abort, update (default $g_on_schema_exists)"
    exit 64
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --work-folder|-o)
            g_work_folder="$2"; shift 2;;
        --sql-folder|-s)
            g_sql_folder="$2"; shift 2;;
        --force)
            g_force="YES"; shift ;;
        --mode)
            g_mode="$2"; shift 2;;
        --change)
            g_cr_name="$2"; shift 2;;
        --on-schema-exists)
            g_on_schema_exists="$2"; shift 2;;
        --help)
            usage ;
            exit 0 ;;
       *)
        usage "unknown option $key";
       ;;
    esac
done

function get_cr_id() {
    day=$(date +%Y%m%d)
    cr_x="${day}_DDL_CLEARINGHOUSE_SYSTEM"
    echo "${cr_x^^}"
}

function generate_deploy_script() {

    local target_file=$1
    local sql_folder=$2
    local cr_name=$3
    local target_folder=$(dirname $target_file)

    echo "-- Deploy subsystem: $cr_name"                                                     > $target_file
    echo ""                                                                                 >> $target_file
    echo "-- NOTE! DO NOT CHANGE THIS FILE!"                                                >> $target_file
    echo ""                                                                                 >> $target_file
    echo "-- THIS FILE IS AUTOMATICALLY GENERATED BY SEAD CHANGE CONTROL SYSTEM"            >> $target_file
    echo "-- Use bin/$g_script_name to generate this file."                                 >> $target_file
    echo ""                                                                                 >> $target_file
    echo "/***************************************************************************"     >> $target_file
    echo "Author         $g_author"                                                         >> $target_file

    echo "Date           $day"                                                              >> $target_file
    echo "Description    Deploy of Clearinghouse Transport System."                         >> $target_file
    echo "Issue          https://github.com/humlab-sead/sead_change_control/issues/215"     >> $target_file
    echo "Prerequisites  "                                                                  >> $target_file
    echo "Reviewer"                                                                         >> $target_file
    echo "Approver"                                                                         >> $target_file
    echo "Idempotent     YES"                                                               >> $target_file
    echo "Notes          Use --single-transactin on execute!"                               >> $target_file
    echo "***************************************************************************/"     >> $target_file
    echo ""                                                                                 >> $target_file
    echo "set client_encoding = 'UTF8';"                                                    >> $target_file
    echo "set standard_conforming_strings = on;"                                            >> $target_file
    echo "set client_min_messages to warning;"                                              >> $target_file

    if [ "$g_on_schema_exists" == "drop" ]; then
        echo ""                                                                             >> $target_file
        echo "drop schema if exists clearing_house cascade;"                                >> $target_file
    fi

    echo ""                                                                                 >> $target_file
    echo "create schema if not exists clearing_house authorization clearinghouse_worker;"   >> $target_file
    echo ""                                                                                 >> $target_file

    echo "-- 00_assign_privileges.sql"                                                      >> $target_file
    cat $sql_folder/00_assign_privileges.sql                                                >> $target_file
    echo ""                                                                                 >> $target_file

    echo "set role clearinghouse_worker;"                                                   >> $target_file
    echo ""                                                                                 >> $target_file
    echo "\set autocommit off;"                                                             >> $target_file
    echo ""                                                                                 >> $target_file
    echo "\cd /repo/subsystem/deploy"                                                       >> $target_file
    echo ""                                                                                 >> $target_file
    echo "begin;"                                                                           >> $target_file
    echo ""                                                                                 >> $target_file

    for file in $(ls $sql_folder/0[1,2,3,4]*.sql); do
        echo "-- $file"                                                                     >> $target_file
        cat $file                                                                           >> $target_file
        echo ""                                                                             >> $target_file
    done

    echo "call clearing_house.create_clearinghouse_model(false);"                           >> $target_file
    echo "call clearing_house.populate_clearinghouse_model();"                              >> $target_file
    echo "call clearing_house.create_public_model(false, false);"                           >> $target_file

    for file in $(ls $sql_folder/05*.sql); do
        echo ""                                                                             >> $target_file
        echo "-- $file"                                                                     >> $target_file
        cat $file                                                                           >> $target_file
        echo ""                                                                             >> $target_file
    done

    for file in $(ls $sql_folder/review/*.sql); do
        echo ""                                                                             >> $target_file
        echo "-- $file"                                                                     >> $target_file
        cat $file                                                                           >> $target_file
        echo ""                                                                             >> $target_file
    done

    for file in $(ls $sql_folder/reporting/*.sql); do
        echo ""                                                                             >> $target_file
        echo "-- $file"                                                                     >> $target_file
        cat $file                                                                           >> $target_file
        echo ""                                                                             >> $target_file
    done

	echo "commit;"                                                                          >> $target_file
    echo ""                                                                                 >> $target_file
	echo "reset role;"                                                                      >> $target_file

    echo "notice: change request deploy script stored in $target_file"
}

function add_new_change_request()
{
    local work_file=$1
    local project=$2

    local target_file=./${project}/deploy/${cr_name}.sql

    echo "notice: adding new change request..."

    if [ ! -f "$work_file" ]; then
        echo "failure: cannot add change request since $work_file is missing"
        exit 64
    fi

    if [ -f $target_file ]; then
        echo "failure: ccs task ${cr_name}.sql already exists (cannot resolve conflict)"
        exit 64
    fi

    local note="Deploy of Clearinghouse Transport System"
    
    ./bin/add-change-request --project ${project} --change $cr_name --create-issue --note "$note"

    cp -f $work_file $target_file

    echo "notice: change request ${cr_name} has been added to SEAD Change Control System."
    echo "notice: please remember to commit repository!"
}

function check_setup() {

    local mode=$1
    local work_folder=$2
    local sql_folder=$3
    local cr_name=$4
    local force=$5

    if [ ! -d "$sql_folder" ]; then
        usage "SQL folder not found: $sql_folder"
    fi

    if [ "$mode" == "update" ]; then

        if [  ! -f ./${g_project}/deploy/${cr_name}.sql ]; then
            usage "cannot update change request $cr_name since no such deploy file exists"
        fi

        if [ "$force" != "YES" ]; then
            echo "cannot update change request $cr_name without --force"
            exit 64
        fi
    fi

    if [ ! -d $work_folder ]; then
        usage "work folder not $work_folder not found"
    fi

    local mode_opts=("new" "update" "dryrun")

    if [[ ! " ${mode_opts[@]} " =~ " ${mode} " ]]; then
        usage "unknown value for option --mode";
    fi

    local schema_opts=("abort" "drop" "update")

    if [[ ! " ${schema_opts[@]} " =~ " ${g_on_schema_exists} " ]]; then
        usage "unknown value for option --on-schema-exists";
    fi

}

if [ "$g_mode" == "new" ]; then
    g_cr_name=$(get_cr_id)
fi

g_work_file=$g_work_folder/${g_cr_name}.sql

check_setup $g_mode $g_work_folder $g_sql_folder $g_cr_name $g_force

generate_deploy_script $g_work_file $g_sql_folder $g_cr_name

if [ "$g_mode" == "new" ]; then

    add_new_change_request $g_work_file $g_project

elif [ "$g_mode" == "update" ]; then

    cp -f $g_work_file ./${g_project}/deploy/${g_cr_name}.sql

elif [ "$g_mode" == "dryrun" ]; then

    cat $g_work_file

fi

