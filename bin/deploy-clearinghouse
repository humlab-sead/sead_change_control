#!/bin/bash

SHELL=/bin/bash

set -e

g_script_name=`basename "$0"`
g_script_dir=$(cd "$( dirname "${BASH_SOURCE[0]}")" && pwd )
g_work_folder=./tmp
g_sql_folder=
g_force=NO
g_mode=dryrun
g_project=subsystem
g_cr_author=`getent passwd $USER | cut -d ':' -f 5 | cut -d ',' -f 1`
g_note=
g_issue_id=
g_issue_opt=--create-issue
g_cr_name=20191217_DDL_CLEARINGHOUSE_SYSTEM
g_description="Deploy of Clearinghouse System"
g_on_schema_exists=drop
g_schema_name=clearing_house

g_real_path=$(readlink -f "${BASH_SOURCE[0]}")

function usage() {
    if [ "$1" != "" ]; then
        echo "error: $1"
    fi
    echo "usage: $g_script_name [--mode update|new|dryrun] [--sql-folder FOLDER] [--force]"
    echo ""
    echo "       --mode dryrun|update|new Whether to update existing change request or add a new one to SEAD Control System"
    echo "               dryrun           Generate change request in target folder but do not update or add to SEAD Control System"
    echo "               update           Update deploy script in existing change request in SEAD Control System"
    echo "               new              Add new change request to SEAD Control System. Mandatory."
    echo "       --note                   Note added to CR and issue"
    echo "       --related-issue-id       Related issue Github id"
    echo "       --no-create-issue        Do not create issue" 
    echo "       --sql-folder FOLDER      Clearinghouse SQL scripts folder. Mandatory."
    echo "       --force                  Force overwrite of existing temporary folder exists"
    echo "       --work-folder FOLDER     Override default temporary dir (not recommended)"
    echo "       --change                 Override default change request name (default $g_cr_name)"
    echo "       --on-schema-exists       What to do (in deploy script) if schema exists: drop, abort, update (default $g_on_schema_exists)"

    exit 64
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --work-folder)
            g_work_folder="$2"; shift 2;;
        --sql-folder|-s)
            g_sql_folder="$2"; shift 2;;
        --force)
            g_force="YES"; shift ;;
        --mode)
            g_mode="$2"; shift 2;;
        --change)
            g_cr_name="$2"; shift 2;;
        --note|-n)
            g_note="$2"; shift 2;;
        --related-issue-id)
            g_issue_id="$2"; shift 2;;
        --no-create-issue)
            g_issue_opt=""; shift;;
        --dry-run)
            g_mode="dryrun"; shift;;
        --on-schema-exists)
            g_on_schema_exists="$2"; shift 2;;
        --help)
            usage ;
            exit 0 ;;
        --*)
            usage  "invalid option $1"
            exit 64
        ;;
        *)
            POSITIONAL+=("$1")
            shift
        ;;
    esac
done

function get_cr_id() {
    day=$(date +%Y%m%d)
    cr_x="${day}_DDL_CLEARINGHOUSE_SYSTEM"
    echo "${cr_x^^}"
}

function generate_deploy_script() {

    local work_file=$1
    local sql_folder=$2
    local cr_name=$3

    local target_folder=$(dirname $work_file)

    rm -rf $target_folder && mkdir -p $target_folder

    echo "-- Deploy $g_project: $cr_name"                                                    > $work_file
    echo ""                                                                                 >> $work_file
    echo "-- NOTE! DO NOT CHANGE THIS FILE!"                                                >> $work_file
    echo ""                                                                                 >> $work_file
    echo "-- THIS FILE IS AUTOMATICALLY GENERATED BY SEAD CHANGE CONTROL SYSTEM"            >> $work_file
    echo ""                                                                                 >> $work_file
    echo "-- Use bin/$g_script_name to generate this file."                                 >> $work_file
    echo ""                                                                                 >> $work_file
    echo "/***************************************************************************"     >> $work_file
    echo "  Author         $g_author"                                                       >> $work_file
    echo "  Date           $(date +%Y-%m-%d)"                                               >> $work_file
    echo "  Description    $g_description"                                                  >> $work_file
    echo "  Issue          https://github.com/humlab-sead/sead_change_control/issues/215"   >> $work_file
    echo "  Prerequisites  "                                                                >> $work_file
    echo "  Reviewer"                                                                       >> $work_file
    echo "  Approver"                                                                       >> $work_file
    echo "  Idempotent     YES"                                                             >> $work_file
    echo "  Notes          Use --single-transaction on execute!"                            >> $work_file
    echo "***************************************************************************/"     >> $work_file
    echo ""                                                                                 >> $work_file
    echo "set client_encoding = 'UTF8';"                                                    >> $work_file
    echo "set standard_conforming_strings = on;"                                            >> $work_file
    echo "set client_min_messages to warning;"                                              >> $work_file

    if [ "$g_on_schema_exists" == "drop" ]; then
        echo ""                                                                             >> $work_file
        echo "drop schema if exists $g_schema_name cascade;"                                >> $work_file
    fi

    echo ""                                                                                 >> $work_file
    echo "create schema if not exists $g_schema_name authorization clearinghouse_worker;"   >> $work_file
    echo ""                                                                                 >> $work_file

    echo "-- 00_assign_privileges.sql"                                                      >> $work_file
    cat $sql_folder/00_assign_privileges.sql                                                >> $work_file
    echo ""                                                                                 >> $work_file

    echo "set role clearinghouse_worker;"                                                   >> $work_file
    echo ""                                                                                 >> $work_file

    echo "\set autocommit off;"                                                             >> $work_file
    echo ""                                                                                 >> $work_file
    echo "\cd /repo/subsystem/deploy"                                                       >> $work_file
    echo ""                                                                                 >> $work_file
    echo "begin;"                                                                           >> $work_file
    echo ""                                                                                 >> $work_file

    for file in $(ls $sql_folder/0[1,2,3,4]*.sql); do
        echo "-- $(basename $file)"                                                                     >> $work_file
        cat $file                                                                           >> $work_file
        echo ""                                                                             >> $work_file
    done

    echo "call clearing_house.create_clearinghouse_model(false);"                           >> $work_file
    echo "call clearing_house.populate_clearinghouse_model();"                              >> $work_file
    echo "call clearing_house.create_public_model(false, false);"                           >> $work_file

    for file in $(ls $sql_folder/05*.sql); do
        echo ""                                                                             >> $work_file
        echo "-- $(basename $file)"                                                                     >> $work_file
        cat $file                                                                           >> $work_file
        echo ""                                                                             >> $work_file
    done

    for file in $(ls $sql_folder/review/*.sql); do
        echo ""                                                                             >> $work_file
        echo "-- $(basename $file)"                                                                     >> $work_file
        cat $file                                                                           >> $work_file
        echo ""                                                                             >> $work_file
    done

    for file in $(ls $sql_folder/reporting/*.sql); do
        echo ""                                                                             >> $work_file
        echo "-- $(basename $file)"                                                                     >> $work_file
        cat $file                                                                           >> $work_file
        echo ""                                                                             >> $work_file
    done

	echo "commit;"                                                                          >> $work_file
    echo ""                                                                                 >> $work_file
	echo "reset role;"                                                                      >> $work_file

    echo "notice: done generating deploy script $work_file"
}

function add_new_change_request()
{
    local work_file=$1
    local project=$2
    local cr_name=$3
    local note=$4
    local issue_id=$5

    local deploy_file=./$project/deploy/$cr_name.sql

    if [ "$note" == "" ]; then
        note=$g_description
    fi

    if [ "$issue_id" != "" ]; then
        note="$note (https://github.com/humlab-sead/sead_change_control/issues/$issue_id)."
    fi

    if [ ! -f "$work_file" ]; then
        echo "failure: cannot add change request since $work_file is missing"
        exit 64
    fi

    if [ -f "$deploy_file" ]; then
        echo "failure: CR $cr_name.sql already exists (unable to resolve conflict)"
        exit 64
    fi

    ./bin/add-change-request --project $project --change $cr_name $g_issue_opt --note "$note"

    cp -f $work_file $deploy_file

    echo "notice: change request $cr_name has been added to SEAD Change Control System!"
    echo "notice: please remember to commit repository!"
}

function check_setup() {

    local mode=$1
    local work_folder=$2
    local sql_folder=$3
    local cr_name=$4
    local force=$5

    if [ "$sql_folder" == "" ]; then
        usage "Please specify folder that contains SQL scripts to be deployed"
    fi

    if [ ! -d "$sql_folder" ]; then
        usage "SQL folder $sql_folder not found"
    fi

    if [ "$work_folder" == "" ]; then
        usage "Please specify work folder"
    fi

    if [ "$mode" == "update" ]; then

        if [  ! -f ./${g_project}/deploy/${cr_name}.sql ]; then
            usage "cannot update change request $cr_name since no such deploy file exists"
        fi

        if [ "$force" != "YES" ]; then
            echo "cannot update change request $cr_name without --force"
            exit 64
        fi
    fi

    local mode_opts=("new" "update" "dryrun")

    if [[ ! " ${mode_opts[@]} " =~ " ${mode} " ]]; then
        usage "unknown value for option --mode";
    fi

    local schema_opts=("abort" "drop" "update")

    if [[ ! " ${schema_opts[@]} " =~ " ${g_on_schema_exists} " ]]; then
        usage "unknown value for option --on-schema-exists";
    fi

}

if [ "$g_mode" == "new" ]; then
    g_cr_name=$(get_cr_id)
fi

g_work_folder=$g_work_folder/$g_cr_name
g_work_file=$g_work_folder/${g_cr_name}.sql

check_setup "$g_mode" "$g_work_folder" "$g_sql_folder" "$g_cr_name" "$g_force"

generate_deploy_script "$g_work_file" "$g_sql_folder" "$g_cr_name"

if [ "$g_mode" == "new" ]; then

    add_new_change_request "$g_work_file" "$g_project" "$g_cr_name" "$g_note" "$g_issue_id"

elif [ "$g_mode" == "update" ]; then

    cp -f $g_work_file ./$g_project/deploy/$g_cr_name.sql

elif [ "$g_mode" == "dryrun" ]; then

    cat $g_work_file

fi

